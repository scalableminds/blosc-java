name: CI

on:
  push:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Build c-blosc
        run: |
          cd c-blosc
          mkdir build
          cd build
          cmake .. -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_BUILD_TYPE=Release
          cmake --build . -j8
      
      - name: Build bloscjni (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          cd bloscjni
          gcc \
            -I"$JAVA_HOME/include" -I"$JAVA_HOME/include/linux" \
            -shared -lc -fPIC -o libbloscjni.so -O3 \
            bloscjni.c ../c-blosc/build/blosc/libblosc.a

      - name: Build bloscjni (Mac)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          cd bloscjni
          gcc \
            -I"$JAVA_HOME/include" -I"$JAVA_HOME/include/darwin" \
            -dynamiclib -o libbloscjni.dylib -O3 \
            bloscjni.c ../c-blosc/build/blosc/libblosc.a

      - name: Build bloscjni (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        run: |
          cd bloscjni
          echo $JAVA_HOME
          ls -lisah ..\\c-blosc\\build\\blosc
          x86_64-w64-mingw32-gcc \
            -c -I"$JAVA_HOME\\include" -I"$JAVA_HOME\\include\\win32" -O3 \
            -shared -o libbloscjni.dll \
            bloscjni.c ..\\c-blosc\\build\\blosc\\Release\\libblosc.lib

      - name: Build blosc-java
        run: |
          mvn compile
          
      - name: Test blosc-java
        run: |
          mvn test

      - uses: actions/upload-artifact@v3
        with:
          name: bloscjni-${{ matrix.os }}
          path: bloscjni/libbloscjni.*
